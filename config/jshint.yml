# ------------ rake task options ------------

# JS files to check by default, if no parameters are passed to rake jshint
# (you may want to limit this only to your own scripts and exclude any external scripts and frameworks)

# this can be overridden by adding 'paths' and 'exclude_paths' parameter to rake command:
#   rake jshint paths=path1,path2,... exclude_paths=library1,library2,...

paths:
  - app/assets/javascripts/**/*.js

exclude_paths:
  - app/assets/javascripts/vendor/**/*.js


# ------------ jshint options ------------
# visit http://jshint.com/ for complete documentation

maxerr:   50        # The maximum number of warnings reported (per file)
passfail: false     # true if the scan should stop on first error (per file)

# Enforcing
bitwise:       true      # true if bitwise operators should not be allowed
camelcase:     true
cap:           false     # true if upper case HTML should be allowed
css:           false     # true if CSS workarounds should be tolerated
curly:         true      # true if curly braces around blocks should be required (even in if/for/while)
eqeqeq:        true      # true if === should be required (for ALL equality comparisons)
forin:         true     # true if unfiltered 'for in' statements should be allowed
fragment:      false     # true if HTML fragments should be allowed
freeze:        true
immed:         true      # true if immediate function invocations must be wrapped in parens
indent:        2         # Number of spaces that should be used for indentation - used only if 'white' option is set
latedef:       nofunc
newcap:        true      # true if Initial Caps must be used with constructor functions
newstat:       false
noarg:         true      # true if arguments.caller and arguments.callee should be disallowed
noempty:       true      # true if empty blocks should be disallowed
nomen:         false     # true if initial or trailing underscore in identifiers should be forbidden
nonbsp:        true
nonew:         false      # true if using `new` for side-effects should be disallowed
on:            false     # true if HTML event handlers (e.g. onclick="...") should be allowed
onevar:        false     # true if only one var statement per function should be allowed
plusplus:      false     # true if ++ and -- should not be allowed
quotmark:      single
regexp:        false     # true if . and [^...] should not be allowed in RegExp literals
undef:         true      # true if variables must be declared before used
unused:        true
white:         false     # true if strict whitespace rules apply (see also 'indent' option)
strict:        true     # true if the ES5 "use strict"; pragma is required
maxparams:     false
maxdepth:      false
maxstatements: false
maxcomplexity: false
maxlen:        80       # Maximum line length

# Relaxing
asi:          false     # true if automatic semicolon insertion should be tolerated
boss:         false     # true if advanced usage of assignments and == should be allowed
debug:        false     # true if debugger statements should be allowed (set to false before going into production)
eqnull:       true
es5:          false     # true if ECMAScript 5 syntax should be allowed
esnext:       false
moz:          false
evil:         false     # true if eval should be allowed
expr:         false
funcscope:    false
globalstrict: false
iterator:     false
lastsemic:    false
laxbreak:     false     # true if statement breaks should not be checked
laxcomma:     false
loopfunc:     false      # true if functions should be allowed to be defined within loops
multistr:     true
noyield:      false
notypeof:     false
proto:        false
scripturl:    false
shadow:       false
statinexp:    false
sub:          true      # true if subscript notation may be used for expressions better expressed in dot notation
supernew:     false
validthis:    true

# Environments
adsafe:      false     # true if ADsafe rules should be enforced. See http://www.ADsafe.org/
browser:     true      # true if the standard browser globals should be predefined
browserify:  false
couch:       true      # true if CouchDB globals should be predefined
devel:       true     # true if functions like alert, confirm, console, prompt etc. are predefined
dojo:        false
jasmine:     true
jquery:      true
mocha:       true
mootools:    false
node:        false     # true if the Node.js environment globals should be predefined
nonstandard: false
prototypejs: false
qunit:       false
rhino:       false     # true if the Rhino environment globals should be predefined
safe:        false     # true if the safe subset rules are enforced (used by ADsafe)
shelljs:     false
windows:     false     # true if Windows-specific globals should be predefined
widget:      false     # true if the Yahoo Widgets globals should be predefined
worker:      false
wsh:         false
yui:         false

# Names of predefined global variables - comma-separated string or a YAML array
predef:   [
  'angular',
  'inject',
  'module',
  'moment',
  '_'
]
