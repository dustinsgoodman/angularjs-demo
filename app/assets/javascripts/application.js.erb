//= require_self
//= require_tree ./directives
//= require_tree ./services
//= require_tree ./controllers

(function () {
  'use strict';

  angular
    .module('TodoApp', [
      'ngRoute',
      'ngResource'
    ])
    .config(locationSettings)
    .config(routeSettings)
    .config(httpSettings);

  locationSettings.$inject = ['$locationProvider'];
  function locationSettings($locationProvider) {
    $locationProvider.html5Mode({
      enabled: true
    });
  }

  routeSettings.$inject = ['$routeProvider'];
  function routeSettings($routeProvider) {
    $routeProvider
      .when('/register', {
        templateUrl: '<%= asset_path("users/new.html") %>',
        controller: 'RegisterCtrl',
        controllerAs: 'register'
      })
      .when('/login', {
        templateUrl: '<%= asset_path("sessions/new.html") %>',
        controller: 'LoginCtrl',
        controllerAs: 'login'
      })
      .when('/', {
        templateUrl: '<%= asset_path("todos/index.html") %>',
        controller: 'TodosCtrl',
        controllerAs: 'todos',
        resolve: {
          todos: getTodos
        }
      })
      .when('/:id', {
        templateUrl: '<%= asset_path("todos/show.html") %>',
        controller: 'TodoCtrl',
        controllerAs: 'todo',
        resolve: {
          todo: getTodo
        }
      });

    getTodos.$inject = ['todosApi'];
    function getTodos(todosApi) {
      return todosApi.index().$promise;
    }

    getTodo.$inject = ['$route', 'todosApi'];
    function getTodo($route, todosApi) {
      return todosApi.show({ id: $route.current.params.id });
    }
  }

  httpSettings.$inject = ['$httpProvider'];
  function httpSettings($httpProvider) {
    $httpProvider.interceptors.push(interceptors);
    _.each(['get', 'post', 'put', 'patch', 'delete'], function (method) {
      var headers = $httpProvider.defaults.headers;
      if (_.isUndefined(headers[method]) || _.isNull(headers[method])) {
        headers[method] = {};
      }
      $httpProvider.defaults.headers[method]['If-Modified-Since'] =
        'Mon, 26 Jul 1997 05:00:00 GMT';
    });

    interceptors.$inject = ['$q', '$location', 'auth'];
    function interceptors($q, $location, auth) {
      return {
        request: request,
        response: response,
        responseError: responseError
      };

      function request(req) {
        _.each(auth.getAuthHeaders(), function (val, key) {
          req.headers[key] = val;
        });
        return req;
      }

      function response(resp) {
        auth.updateHeadersFromResponse(resp);
        return resp;
      }

      function responseError(resp) {
        auth.updateHeadersFromResponse(resp);
        if (resp.status === 401) {
          $location.path('/login');
        }
        return $q.reject(resp);
      }
    }
  }
})();
